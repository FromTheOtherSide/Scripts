#!/bin/bash


#---------------------------- REPOSITORY LOCATIONS ----------------------------#
declare -i ROW COL
ROW=0; COL=0

# Clear the Screen
alias cls='printf "\033c"'

yesno(){
	select opt in 'Yes' 'Cancel'; do
		case $opt in
			Yes) break ;;
			Cancel) exit 1 ;;
		esac
	done
}


kgj;oagodgj:w


printf	'Preparing to import your git repository, have your credentials ready.'

printf 'Ready?'
yesno

l_repo='/home/otherside/Repos/owned/dots'                              â”‚                                                                               
r_repo='git@github.com:FromTheOtherSide/dotfiles.git' 

Ocodes() {

	R='\033[0m'    #reset
	B='\033[1m'    #bold
	D='\033[2m'    #dim
	I='\033[8m'    #invisible 
	L='\033[5m'    #blinking
	u="\033[${c}A" #moves cursor up # lines
	d="\033[${c}B" #moves cursor down # lines
	r="\033[${c}C" #moves cursor right # columns
	l="\033[${c}D" #moves cursor left # columns          
	n="\033[${c}E" #moves cursor to beginning of next line, # lines down
	p="\033[${c}F" #moves cursor to beginning of previous line, # lines up
}



write() {
	local text color
	

	printf '%s%s%s' "$color" "$text" "$R"


}

mkrepo() { 
	local dir
	dir=${1:?USAGE}
	mkdir "$dir"
	echo $?
}
	
clone_repo() {
	declare local_repo remote_repo
	remote_repo="${1:?'Error, need a remote repo'}"
	local_repo="${2:?'Error, need a local repo'}"
	git clone "$remote_repo" "$local_repo"
	echo $? 
}

backup_duplicate() {
	

}



main() {

	msg 'Creating Local Repository Directory.' 
	msg '' "$lrepo"

	msg 'Cloning Remote Repository.'
	msg '' "$rrepo"

	msg 'Backing Up Duplicate Files.'
	msg '' "$dupes"

	msg 'Checking Out To The Working Directory.'
	msg '' "$HOME"


}












	select fname in *;
          do
                echo you picked $fname \($REPLY\)
                break;
          done


git clone --bare "$dotfiles_repo_github" "$dotfiles_repo_local"

local_df_repo='/home/otherside/Repos/owned/dots'

github_df_repo='git@github.com:FromTheOtherSide/dotfiles.git'



df_func() { 
	/usr/bin/git --git-dir='/home/otherside/Repos/owned/dots' --work-tree="$HOME" "$@" 
}

mkdir -p "$local_df_repo"


gitdots checkout 2>&1 | egrep "\s+\." | awk {'print $1'} |
	xargs -I{} mv {} present-before-gitdots/{}

gitdots checkout 



	
gitdots checkout &> "$HOME/dupes"

mv % "$HOME/present-before-gitdots/"
	
gitdots checkout 

if [[ "$?" -ne 0 ]]; then
	echo 'There seem to be duplicate files that cannot be moved to the
		backup file'
fi
	
echo 'Look for these duplicates'
	
ls "$HOME/present-before-gitdots"

