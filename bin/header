#!/bin/bash

# Create headers and banners for bash scripts.      ___  ___  _  ___  ___ ___  #
# Create fold lines for vim scripts                |__ \/ __|| || _ \/ __/ __| #
#                                                  / __/\__ \| |||_| | _/\__ \ #
# v0.03                                            \___/\___/|_||___/\___\___/ #


#_________________________________ HEADER __________________________________{{{1
declare SCRIPT snd_l end_r spc_i spc_l spc_r char width spaces_i text align mode
declare verbosity _clr 
SCRIPT="${0##*/}"
end_l='#'
end_r='#'
spc_i=' ' 
spc_l=' '
spc_r=' '
char='_'
width=80
spaces_i=3
text=''
align='center'
mode=( 'header' 'normal' 0 )  
verbosity=4 # 0=Only User 1=err & lower 2=info & lower 3=warn & lower 4=debug


#__________________________________ USAGE __________________________________{{{1
usage() {
	cat <<-USAGE	
	Print a header for each text argument. 
	$SCRIPT -h 
	$SCRIPT -s  -b
	sscript	[-w WIDTH][ -c CHAR ][-A align]  [ TEXT TEXT2 ... ]
				
	-h		: Show this usage summary.

	-2			Print two (2) headers for each argument, one with
				prepended with 'begin', the other prepended with end.

	-b			Print a banner with a signature on the right and text wrapped 
				to fit next to the signature.

	-l LEFT		The leftmost special character

	-a ALIGN    Text alignment [L|left] | [R|right] | [C|center] 

	-c CHAR		Char will form the header row, '_' default.

	-w WIDTH	: Header width in characters, eighty (80) default.

	TEXT		: A header with TEXT string centered will be printed
					for each argument. Include '' for a header with no text. 
					Can come from STDIN.
	
# Create headers and banners for bash scripts.      ___  ___  _  ___  ___ ___  #
# Create fold lines for vim scripts                |__ \/ __|| || _ \/ __/ __| #
#                                                  / __/\__ \| |||_| | _/\__ \ #
# v0.03                                            \___/\___/|_||___/\___\___/ #
#

	Examples:
	header -b '
	Lorem ipsum     dotlor sit amet, consectetur adipiscing elit. Fusce   aliquet 
    commodo libero, nec dapibus 
    purus placerat  quis.
	'


	USAGE
	exit 0
}

#_________________________________ GOPTS _________________________________{{{1
	declare -g char mode text ispace
	declare -ig width 

	local -a args
	while getopt 'l:w:c:f:a:2hbtv' opt; do
		case "$opt" in
			2) mode='header_footer' ;;
			a) align="$OPTARG" ;;
			c) char="$OPTARG" ;;
			f) mode='vimfold'
				 end_r="{{{$OPTARG"
				 spc_i=' '
				 ;;
			b|s) mode='banner' ;;
			l) end_l="$OPTARG" ;;
			m) mode="$OPTARG" ;;
			t) test='true' ;;
			v) ((verbosity++)) ;;
			w) width="$OPTARG" ;;
			h) usage ;;
		esac
	done
	shift $((OPTIND-1))

	text=( "$@" )



msg() {
	OPTIND=1
	local mode mcode cc modecode
	while getopts 'u:eiwd' opt; do
		case "$opt" in
			c) 
				mode='user'; modecode=0; cc=Gb ;; 
			e) 
				mode='err'; modecode=1; cc=Rb ;;
			i) 
				mode='info'; modecode=2; cc=Wd ;;
			w) 
				mode='warn'; modecode=3; cc=Pl ;;
			d)
				mode='debug'; modecode=4; cc=Yd ;;
		esac
	done
	
	shift $(( OPTIND - 1))
	if [[ $modecode -le $verbosity ]]; then
		colors "$1" "$cc" "$2"
	fi
}

#_________________________________ N_CHARS _________________________________{{{1
n_chars() {
	local -i count=${1:-0}
	local c="$2"
	for ((n=1;n<=$count;n++)); do
		out="$out$c"
	done
	printf '%s' "$out"
}

#______________________________ PRINT_HEADER _______________________________{{{1
print_header(){
  local char_l char_r fill
	local -a word
	words=( "$@" )                                       
	[[ $# -eq 0 ]] && words+=( '' )

	for word in "${words[@]}"; do
		_spc_i="$spc_i" char_l='' char_r=''

		[[ -z $word ]] && _spc_i=''

		case $align in
			center|C)
				fill=$(expr length "$end_l$char_l$_spc_i$word$_spc_i$char_r$end_r")
				char_l="$(n_chars "$(( (width - fill)/ 2 ))" "$char" )"
				fill=$(expr length "$end_l$char_l$_spc_i$word$_spc_i$char_r$end_r")
				char_r="$(n_chars "$(( width - fill ))" "$char" )"
				;;
			right|R)
				char_r=''
				fill=$(expr length "$end_l$char_l$_spc_i$word$_spc_i$char_r$end_r")
				char_r="$(n_chars "$(( width - fill ))" "$char" )"
				;;
			left|L)
				char_l=''
				fill=$(expr length "$end_l$char_l$_spc_i$word$_spc_i$char_r$end_r")
				char_l="$(n_chars "$(( width - fill ))" "$char" )"
				;;
		esac

		printf '%s\n' "$end_l$char_l$_spc_i$word$_spc_i$char_r$end_r"
	done
}


begin_end() {
	unset text
	for w in "$@"; do
		U="${w@U}" L="${w@L}"
		case "$w" in
			U) 
				text+="BEGIN $w"
				text+="END $w" 
				;;
			L) 
				text+="begin $w"
				text+="end $w"
				;;
			*) 
				text+=("Begin $w")
				text+=("End $w")
				;;
		esac
	done
}


accept_input() {
echo ${#text}
}


# Format a multirow header with text alignned next to a signature
# hash-space-text-space-space-signature-space-hash             
banner() {
	local long wide padtxt padsig
	local -a foldcmd sig padtxtcmd padsigcmd sig1 final
	local -i fill

	if [[ "${mode[1]}" = 'test' ]]; then
		echo 'Test Mode Enabled'
		read -d '' -r text <<-TEXT
			Lorem ipsum     dotlor sit amet, consectetur adipiscing elit. Fusce   aliquet 
			commodo libero, nec dapibus 
			purus placerat  quis.
		TEXT
		printf '%s' "$text"
	elif [[ ${#text} -eq 0 ]]; then
		while read -r -s; do
			text+=( "$REPLY" )
		done
	fi
	#echo "TEXT = ${text[@]}"


	# The actual signaature
	sig=(
	' ___  ___  _  ___  ___ ___ ' 
	'|__ \/ __|| || _ \/ __/ __|' 
	'/ __/\__ \| |||_| | _/\__ \' 
	'\___/\___/|_||___/\___\___/' 
	)

	# Get signature width
	sig_w=0

	ls=${#sig[@]}
	for s in "${sig[@]}"; do
		if [[ ${#s} -gt $sig_w ]]; then
			sig_w=${#s}
		fi
	done

	fill="$(expr length "$end_l$spc_l$spc_i$sig$spc_r$end_r")"

	# Get remaining room for text
	text_w=$(( width - fill ))

	# Clean up text, replace new lines and tabs with spaces, squeeze spaces
	text="$(printf '%s' "${text[*]}" | tr -s '[[:space:]]' ' ')"
	
	# debug message
	
	# Wrap text rows array elements
	text="$(printf '%s' "$text" | fold -c -s --width="$text_w" -)"
	
	# Determine total rows
	if [[ "${#text[@]}" -gt "${#sig[@]}" ]]; then
		rows="${#text[@]}"
	else 
		rows="${#sig[@]}"
	fi
	
	for ((row=0;row<"$rows";row++)); do
		textrow="${text["$row"]}"
		fill=$(expr length "$end_l$spc_l${text[$row]}$spc_i${sig[$row]}$spc_r$end_r")
		pad="$(n_chars $(( width-fill)) ' ')"

		final+=("$end_l$spc_l${text["$row"]}$pad$spc_i${sig["$row"]}$spc_r$end_r")
	done
	printf '%s\n' "${final[@]}" 
}


#__________________________________ MAIN ___________________________________{{{1

[[ "${mode[2]}" -ge 1 ]] && set -x


case "${mode[0]}" in
	header)	print_header "${text[@]}" ;;
	header_footer) begin_end "${text[@]}"; print_header "${text[@]}" ;;
	banner) banner "${text[@]}" ;;
	*) err "ERROR: invalid mode0: ${mode[0]}" ;;
esac

unset SCRIPT snd_l end_r spc_i spc_l spc_r char width spaces_i text align mode





